<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnswerLineText" xml:space="preserve">
    <value>Here's what I found: {0}</value>
    <comment>The line for the answer</comment>
  </data>
  <data name="QuestionLineText" xml:space="preserve">
    <value>❓: {0}</value>
    <comment>The line for the question</comment>
  </data>
  <data name="ResponseCardTitleText" xml:space="preserve">
    <value>Bingo! 🍀</value>
    <comment>The title text for the response adaptive card</comment>
  </data>
  <data name="UnrecognizedInputCardContentPart1" xml:space="preserve">
    <value>Turns out there is something that my tiny 🤖 🧠 just cannot figure out!</value>
    <comment>First line of the unrecognized input content</comment>
  </data>
  <data name="UnrecognizedInputCardContentPart2" xml:space="preserve">
    <value>However, it may just be that you as the end user may not *have the right idea* about what I do. Click on the *Welcome Message* button to find out what I do</value>
    <comment>Second line of the unrecognized input content</comment>
  </data>
  <data name="UnrecognizedInputCardTitleText" xml:space="preserve">
    <value>Uh Oh!</value>
    <comment>The title content of the unrecognized input card</comment>
  </data>
  <data name="UnrecognizedInputTakeATour" xml:space="preserve">
    <value>Take a tour</value>
    <comment>The text on the unrecognized input button with regards to the button</comment>
  </data>
  <data name="WelcomeCardBulletListItem1" xml:space="preserve">
    <value>Take a tour</value>
    <comment>Bulleted list item 1</comment>
  </data>
  <data name="WelcomeCardBulletListItem2" xml:space="preserve">
    <value>Provide feedback</value>
    <comment>Bulleted list item 2</comment>
  </data>
  <data name="WelcomeCardBulletListItem3" xml:space="preserve">
    <value>Ask a human</value>
    <comment>Bulleted list item 3</comment>
  </data>
  <data name="WelcomeCardContentPart1" xml:space="preserve">
    <value>If you are reading this, it is because you are wondering about what I do. I am {0}, a simple bot that will query against a knowledge base and return you an answer.</value>
    <comment>The first part of the welcome card content with {0} as the bot display name</comment>
  </data>
  <data name="WelcomeCardContentPart2" xml:space="preserve">
    <value>There are times where your questions could be a bit much for my 🤖 🧠 - so make sure you word your queries such that I am able to return a satisfactory answer for you.</value>
    <comment>The second part of the welcome card content</comment>
  </data>
  <data name="WelcomeCardTitleText" xml:space="preserve">
    <value>Hello!</value>
    <comment>The welcome card title text</comment>
  </data>
</root>